# mod UUID to avoid name collisions: edb21cf5-942a-43e6-b418-106a875e9b0f
# UUID mod 2^21-1 is used as the event ID pattern: 634736xxx

## Shatter setup

# Before the initiation event proper is fired, the player is presented with events to pick shatter
# parameters.

# Parameter: history-based or parent-based release.
#
# When releasing a country through the `release` command the game relies on that country's history
# file to set it up, e.g. for picking techs and the right government type. The catch is that history
# files normally only have bookmark data, which is to say that is only really suitable for 1 January
# 1836 (or the A House Divided 1861 bookmark date, though that is actually untested). Even then some
# countries might have their historical data set up for a later date, e.g. if it is a revolt tag. As
# the game progresses, this historical data may become stale resulting e.g. in countries being
# released with a large tech deficit.
#
# When releasing a country through the `release_vassal` command the game relies on the originating
# country to set the new one up. (As the name implies it also sets up a generic puppet-overlord
# relationship, but that can easily be tweaked through subsequente `release_vassal` and/or
# `create_vassal` commands.) Consequently the country ends up with the same techs, inventions, and
# government type as the parent.
country_event = {
    id      = 634736000
    title   = edb21cf5-942a-43e6-b418-106a875e9b0f.history-or-parent.title
    desc    = edb21cf5-942a-43e6-b418-106a875e9b0f.history-or-parent.desc
    picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

    is_triggered_only = yes

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.history-or-parent.opt0

        random_owned = {
            limit = {
                owner = {
                    NOT = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736001 }
        }

        random_owned = {
            limit = {
                owner = {
                    OR = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736002 }
        }

        ai_chance = { factor = 1 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.history-or-parent.opt1

        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.parent-based-releases

        random_owned = {
            limit = {
                owner = {
                    NOT = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736001 }
        }

        random_owned = {
            limit = {
                owner = {
                    OR = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736002 }
        }

        ai_chance = { factor = 0 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.history-or-parent.opt2

        set_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.history-based-releases

        random_owned = {
            limit = {
                owner = {
                    NOT = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736001 }
        }

        random_owned = {
            limit = {
                owner = {
                    OR = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736002 }
        }

        ai_chance = { factor = 0 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.history-or-parent.opt3

        set_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.parent-based-releases

        random_owned = {
            limit = {
                owner = {
                    NOT = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736001 }
        }

        random_owned = {
            limit = {
                owner = {
                    OR = {
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
                        has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }
                }
            }

            owner = { country_event = 634736002 }
        }

        ai_chance = { factor = 0 }
    }
}

country_event = {
    id      = 634736001
    title   = edb21cf5-942a-43e6-b418-106a875e9b0f.releasable-only.title
    desc    = edb21cf5-942a-43e6-b418-106a875e9b0f.releasable-only.desc
    picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

    is_triggered_only = yes

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.releasable-only.opt0

        country_event = 634736002

        ai_chance = { factor = 1 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.releasable-only.opt1

        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables

        country_event = 634736002

        ai_chance = { factor = 0 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.releasable-only.opt2

        set_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables

        country_event = 634736002

        ai_chance = { factor = 0 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.releasable-only.opt3

        set_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables

        country_event = 634736002

        ai_chance = { factor = 0 }
    }
}

# ## Design
#
# The notional algorithm is as follows:
#
# 1. existing countries start at depth 1, non-existing countries have unset depth (0 internally)
# 2. main loop: for every existing country at depth `n`,
#      a. release it from its overlord if applicable
#      b. for every country of which it holds a core, release it as independent with depth `n + 1`
#      c. break loop if `n + 1` at maximum depth, otherwise resume loop for `n + 1`
#
# (Note that the loop can end without hitting maximum depth if there are no more countries to
# release.)
#
# By carefully ordering effects, this performs a breadth-first traversal of all countries: first
# visiting those on the map (depth 1), then those released just prior (depth 2), and so on.
#
# ## Practical constraints
#
# The main limitation is that we don't have access to looping constructs. Instead we (gingerly) have
# main "loop" event x011 either stop if at maximum depth, or else recursively invoke itself at step
# c targeting the freshly released countries of step b.
#
# Note that because every iteration step tentatively invokes the next one for multiple countries
# this would be a classic SUPERLINEAR nested loop. We *must* perform careful bookkeeping to prevent
# redundant code, safeguarding performance: the `to-be-broken` country flag. For every depth `n`,
# every country receives event x011 exactly once.
#
# ## Ordering of effects
#
# When an event is fired, its `immediate` block runs *unconditionally* first of all. Accordingly if
# that block fires subsequent events, corresponding `immediate` blocks run just as unconditionally.
# This is what permits carefully ordering of our effects to ensure a proper breadth-first traversal.
#
# In comparison it's unclear how `option` blocks are ordered relative to other invoking and invoked
# event code. `option` blocks also respect the `allow_multiple_instances` flag.
#
# ## Shattering the most
#
# The purpose of relying on breadth-first traversal is to help achieve the goal of shattering the
# world to the greatest extent, and to improve reliability. Without the loop a single pass could, in
# circumstances of multiple overlapping unreleased cores, release just one country where two would
# be possible. With a loop the freshly released country gets the opportunity to be shattered in
# turn, circumstances permitting.
#
# As the traversal only provides ordering guarantees between countries with differing depths, we
# still want to take extra precautions. To that end we really perform multiple complete traversals
# to handle the following considerations:
# - releasing capitals first makes for a nicer map, in the sense that more countries will be holding
#   their historical capital and it avoids unnecessarily making exclaves (consider the case of the
#   Basque country which straddles France and Spain: it's best being released by Spain first)
# - likewise when it comes to releasing non-unions before cultural unions, since the latter tend to
#   be large countries spanning others
#
# All together this makes for four passes.
#
# ## Releasing
#
# x012-x013 is one chain to release the initial receiver of x011. The chain spans two events to
# juggle THIS & FROM, due to script limitations:
#
# - x012 performs checks, and cannot use remove_core
# - x013 performs the bulk of the work: release & core removal, while also performing
#   bookkeeping--it also acts as a notification event (but refer to the note on multiple instances)
#
# ## Transferring cores
#
# To put the finishing touches, released countries at depth `n` retreive their cores from countries
# at depth `n - 1`. Consider again the case of the Basque country straddling France and Spain as a
# motivating example. This also makes the algorithm less sensible to the otherwise arbitrary order
# of release: the releaser ends up only mattering for the location of the newly made capital.

# Initiation event
country_event = {
    id      = 634736002
    title   = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering.title
    desc    = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering.desc
    picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

    is_triggered_only = yes
    allow_multiple_instances = no # anti-spam safety, but only for singleplayer

    immediate = {
        ## Set saved parameters

        random_owned = {
            limit = {
                owner = {
                    has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.parent-based-releases
                }
            }

            set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.parent-based-releases
        }

        random_owned = {
            limit = {
                owner = {
                    has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                }
            }

            set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
        }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering.opt0

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering

        # N.b. scopes such as any_country inside events fired from a decision appears to follow
        # decision rules

        ## Non-unions with capitals

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break every country

        country_event = 634736011

        any_country = {
            limit = {
                exists = yes
            }

            country_event = 634736011
        }

        ## Culture unions with capitals

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break every country

        country_event = 634736011

        any_country = {
            limit = {
                exists = yes
            }

            country_event = 634736011
        }

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ## Non-unions without capitals

        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break every country

        country_event = 634736011

        any_country = {
            limit = {
                exists = yes
            }

            country_event = 634736011
        }

        ## Culture unions without capitals

        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break every country

        country_event = 634736011

        any_country = {
            limit = {
                exists = yes
            }

            country_event = 634736011
        }

        ## Clean up

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ai_chance = { factor = 0 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering.opt1

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering

        # N.b. scopes such as any_country inside events fired from a decision appears to follow
        # decision rules

        ## Non-unions with capitals

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break this country

        country_event = 634736011

        ## Culture unions with capitals

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break this country

        country_event = 634736011

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ## Non-unions without capitals

        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break this country

        country_event = 634736011

        ## Culture unions without capitals

        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        set_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ### (Re)set bookkeeping

        any_country = {
            limit = {
                exists = no
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 0
            }
        }

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        set_variable = {
            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
            value = 1
        }

        any_country = {
            limit = {
                exists = yes
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            set_variable = {
                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth
                value = 1
            }
        }

        ### Break this country

        country_event = 634736011

        ## Clean up

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions

        ai_chance = { factor = 0 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering.opt2

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering

        ai_chance = { factor = 1 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering.opt3

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.history-based-releases
        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.parent-based-releases

        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.only-releasables
        clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables

        ai_chance = { factor = 0 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering.opt4

        clr_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.shattering

        set_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.no-more-shatter

        ai_chance = { factor = 0 }
    }
}

## Shatter machinery

# Main loop
country_event = {
    id      = 634736011
    title   = edb21cf5-942a-43e6-b418-106a875e9b0f.break.title
    desc    = edb21cf5-942a-43e6-b418-106a875e9b0f.break.desc
    picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

    is_triggered_only = yes
    # See x013 for reasoning.
    #allow_multiple_instances = yes

    immediate = {
        random_owned = {
            limit = {
                owner = {
                    is_vassal = yes
                }
            }

            owner = {
                overlord = {
                    release_vassal = THIS
                }
            }
        }

        # release next depth
        any_country = {
            limit = {
                exists = no

                any_core = {
                    owned_by = THIS
                }

                OR = {
                    capital_scope = { owned_by = THIS }
                    has_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-without-capital
                }

                OR = {
                    is_cultural_union = no
                    has_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions
                }
            }

            country_event = 634736012
        }

        # resume breadth-first traversal
        any_country = {
            limit = {
                has_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken

                OR = {
                    AND = {
                        THIS = {
                            check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 1
                            }
                            NOT = { check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2
                            } }
                        }

                        check_variable = {
                            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2
                        }
                        NOT = { check_variable = {
                            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3
                        } }
                    }

                    AND = {
                        THIS = {
                            check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2
                            }
                            NOT = { check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3
                            } }
                        }

                        check_variable = {
                            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3
                        }
                        NOT = { check_variable = {
                            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4
                        } }
                    }

                    AND = {
                        THIS = {
                            check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3
                            }
                            NOT = { check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4
                            } }
                        }

                        check_variable = {
                            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4
                        }
                        NOT = { check_variable = {
                            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 5
                        } }
                    }

                    AND = {
                        THIS = {
                            check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4
                            }
                            # N.b. saturate at 5, but avoid non-terminating loop here
                            NOT = { check_variable = {
                                which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 5
                            } }
                        }

                        # N.b. saturate at 5, such that everything above is fair game
                        check_variable = {
                            which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 5
                        }
                    }
                }
            }

            clr_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
            country_event = 634736011
        }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.break.opt0

        ai_chance = { factor = 1 }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.break.opt1

        set_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.no-more-shatter

        ai_chance = { factor = 0 }
    }
}

# Release setup
country_event = {
    id      = 634736012
    title   = edb21cf5-942a-43e6-b418-106a875e9b0f.petition.title
    desc    = edb21cf5-942a-43e6-b418-106a875e9b0f.petition.desc
    picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

    is_triggered_only = yes
    allow_multiple_instances = yes

    immediate = {
        # ask to be released
        random_country = {
            limit = {
                tag = FROM

                # avoid self-destruction
                any_owned_province = {
                    NOT = {
                        is_core = THIS
                    }
                }

                THIS = {
                    exists = no

                    OR = {
                        # N.b. this is an implication, but cannot be structured as one due to game
                        # shortcomings.
                        is_releasable_vassal = yes
                        has_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.allow-unreleasables
                    }

                    OR = {
                        NOT = { is_cultural_union = yes }
                        has_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.release-cultural-unions
                    }
                }
            }

            # setup FROM for remove_core
            country_event = 634736013
        }

        # transfer other cores
        any_country = {
            limit = {
                exists = yes
                THIS = { exists = yes }

                OR = {
                    AND = {
                        FROM = {
                            check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 1 }
                            NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2 } }
                        }
                        NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2 } }
                    }

                    AND = {
                        FROM = {
                            check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2 }
                            NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3 } }
                        }
                        NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3 } }

                    }

                    AND = {
                        FROM = {
                            check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3 }
                            NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4 } }
                        }
                        NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4 } }

                    }

                    AND = {
                        FROM = {
                            check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4 }
                            NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 5 } }
                        }
                        NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 5 } }

                    }
                }

                # avoid self-destruction
                any_owned_province = { NOT = { is_core = THIS } }

                # don't take from unciv unless unciv
                OR = {
                    NOT = { civilized = no }
                    THIS = { civilized = no }
                }

                any_owned_province = {
                    is_core = THIS
                    is_capital = no
                }
            }

            country_event = 634736014
        }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.petition.opt0
    }
}

# Release work
country_event = {
    id      = 634736013
    title   = edb21cf5-942a-43e6-b418-106a875e9b0f.release.title
    desc    = edb21cf5-942a-43e6-b418-106a875e9b0f.release.desc
    picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

    is_triggered_only = yes
    # We could allow this if we wanted. One way or the other the event *is* fired multiple times
    # against `THIS` (from main loop event x011), and the `immediate` block appears to be processed
    # every time regardless of `allow_multiple_instances`.
    #
    # That is, from the perspective of the human player, a single event is received (if multiple
    # instances are disallowed) notifying that a single arbitrary country has been released--and yet
    # every other release candidates have appeared on the map despite a lack of associated
    # notification event. Setting `allow_multiple_instances` results in multiple notifications, with
    # identical effects. To achieve this we are careful not performing anything in the `option`
    # block.
    #
    # Nonetheless we disallow `allow_multiple_instances` to spare players the notification spam.
    #allow_multiple_instances = yes

    immediate = {
        ## Release & revoke

        random_owned = {
            limit = {
                NOT = { has_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.parent-based-releases }
            }

            owner = { release = FROM }
        }

        random_owned = {
            limit = {
                has_global_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.parent-based-releases
            }

            owner = { release_vassal = FROM release_vassal = FROM }
        }

        random_country = {
            limit = {
                tag = FROM
                # don't revoke if the country died performing the release
                THIS = { exists = yes }
            }

            any_owned = {
                remove_core = THIS
            }

            # mark for breadth-first traversal
            set_country_flag = edb21cf5-942a-43e6-b418-106a875e9b0f.to-be-broken
        }

        ## Set depth

        random_country = {
            limit = {
                tag = FROM
                NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 1 } }
                THIS = {
                    check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 1 }
                    NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2 } }
                }
            }

            set_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2 }
        }

        random_country = {
            limit = {
                tag = FROM
                NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 1 } }
                THIS = {
                    check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 2 }
                    NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3 } }
                }
            }

            set_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3 }
        }

        random_country = {
            limit = {
                tag = FROM
                NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 1 } }
                THIS = {
                    check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 3 }
                    NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4 } }
                }
            }

            set_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4 }
        }

        random_country = {
            limit = {
                tag = FROM
                NOT = { check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 1 } }
                THIS = {
                    check_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 4 }
                    # N.b. saturate at 5
                }
            }

            set_variable = { which = edb21cf5-942a-43e6-b418-106a875e9b0f.depth value = 5 }
        }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.release.opt0
    }
}

# Transfer & revoke stray cores
country_event = {
    id      = 634736014
    title   = edb21cf5-942a-43e6-b418-106a875e9b0f.concede.title
    desc    = edb21cf5-942a-43e6-b418-106a875e9b0f.concede.desc
    picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

    is_triggered_only = yes
    # See x013 for reasoning.
    #allow_multiple_instances = yes

    immediate = {
        any_owned = {
            limit = {
                # avoid self-destruction
                THIS = {
                    any_owned_province = { NOT = { is_core = FROM } }

                    # don't take from unciv unless unciv
                    OR = {
                        NOT = { civilized = no }
                        FROM = { civilized = no }
                    }
                }

                is_core = FROM
                is_capital = no
            }

            remove_core = THIS
            secede_province = FROM
        }
    }

    option = {
        name = edb21cf5-942a-43e6-b418-106a875e9b0f.concede.opt0
    }
}

## The following is for development purposes only ##

# country_event = {
#     id      = 634736100
#     title   = "DEBUG Shatter: diagnostic"
#     desc    = ""
#     picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

#     is_triggered_only = yes

#     option = {
#         name = "Launch diagnostic."

#         # N.b. mind event-from-decision restrictions

#         ## outstanding vassals on the map

#         random_owned = {
#             limit = {
#                 owner = {
#                     is_vassal = yes
#                 }
#             }

#             owner = {
#                 country_event = 634736101
#             }
#         }

#         any_country = {
#             limit = {
#                 exists = yes
#                 is_vassal = yes
#             }

#             country_event = 634736101
#         }

#         ## outstanding non-existing

#         any_country = {
#             limit = {
#                 exists = no
#                 any_core = {
#                     is_empty = no
#                 }
#                 NOT = {
#                     tag = REB
#                     # N.b. HPM/HFM
#                     tag = UTI
#                     ruling_party = dominion_conservative
#                     capital_scope = { is_capital = yes }
#                     capital_scope = { is_empty = yes }
#                 }

#                 is_releasable_vassal = yes
#             }

#             country_event = 634736102
#         }

#         any_country = {
#             limit = {
#                 exists = no
#                 any_core = {
#                     is_empty = no
#                 }
#                 NOT = {
#                     tag = REB
#                     # N.b. HPM/HFM
#                     tag = UTI
#                     ruling_party = dominion_conservative
#                     capital_scope = { is_capital = yes }
#                     capital_scope = { is_empty = yes }
#                 }

#                 is_releasable_vassal = no
#             }

#             country_event = 634736103
#         }
#     }
# }

# country_event = {
#     id      = 634736101
#     title   = "DEBUG Shatter: $COUNTRY$ is a vassal"
#     desc    = ""
#     picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

#     is_triggered_only = yes
#     allow_multiple_instances = yes

#     option = {
#         name = "Respond to diagnostic request."
#     }
# }

# country_event = {
#     id      = 634736102
#     title   = "DEBUG Shatter: $COUNTRY$ ($CAPITAL$) does not exist, but maybe should"
#     desc    = ""
#     picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

#     is_triggered_only = yes

#     option = {
#         name = "Respond to diagnostic request."

#         capital_scope = {
#             owner = {
#                 country_event = 634736104
#             }
#         }
#     }
# }

# country_event = {
#     id      = 634736103
#     title   = "DEBUG Shatter: $COUNTRY$ ($CAPITAL$) does not exist, maybe that's fine"
#     desc    = ""
#     picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

#     is_triggered_only = yes

#     option = {
#         name = "Respond to diagnostic request."

#         capital_scope = {
#             owner = {
#                 country_event = 634736104
#             }
#         }
#     }
# }

# country_event = {
#     id      = 634736104
#     title   = "DEBUG Shatter: $COUNTRY$ holds the capital of $FROMCOUNTRY$"
#     desc    = ""
#     picture = edb21cf5-942a-43e6-b418-106a875e9b0f_shatter_event

#     is_triggered_only = yes
#     allow_multiple_instances = yes

#     option = {
#         name = "Respond to diagnostic request"
#     }
# }
